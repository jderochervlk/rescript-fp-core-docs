// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./components/Icon.mjs";
import * as Next from "./bindings/Next.mjs";
import * as $$Text from "./components/Text.mjs";
import * as Util from "./common/Util.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as AnsiPre from "./components/AnsiPre.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Markdown from "./components/Markdown.mjs";
import * as LzString from "lz-string";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as CodeMirror from "./components/CodeMirror.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as HighlightJs from "./common/HighlightJs.mjs";
import * as CompilerManagerHook from "./common/CompilerManagerHook.mjs";
import * as RescriptCompilerApi from "./bindings/RescriptCompilerApi.mjs";
import * as WarningFlagDescription from "./common/WarningFlagDescription.mjs";

if (typeof window !== "undefined" && typeof window.navigator !== "undefined") {
  require("codemirror/mode/javascript/javascript");
  require("codemirror/addon/scroll/simplescrollbars");
  require("plugins/cm-rescript-mode");
  require("plugins/cm-reason-mode");
}
;

function Playground$DropdownSelect(Props) {
  var onChange = Props.onChange;
  var name = Props.name;
  var value = Props.value;
  var disabledOpt = Props.disabled;
  var children = Props.children;
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var opacity = disabled ? " opacity-50" : "";
  return React.createElement("select", {
              className: "text-14 bg-transparent border border-gray-80 inline-block rounded px-4 py-1 font-semibold" + opacity,
              disabled: disabled,
              name: name,
              value: value,
              onChange: onChange
            }, children);
}

function Playground$ToggleSelection(Props) {
  var onChange = Props.onChange;
  var values = Props.values;
  var toLabel = Props.toLabel;
  var selected = Props.selected;
  var disabledOpt = Props.disabled;
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var values$1 = values.length === 0 ? [selected] : values;
  var i = Belt_Array.getIndexBy(values$1, (function (lang) {
          return lang === selected;
        }));
  var selectedIndex = i !== undefined ? i : 0;
  var elements = Belt_Array.mapWithIndex(values$1, (function (i, value) {
          var active = i === selectedIndex ? "bg-fire text-white font-bold" : "bg-gray-80 opacity-50";
          var label = Curry._1(toLabel, value);
          var onMouseDown = function (evt) {
            evt.preventDefault();
            evt.stopPropagation();
            if (i === selectedIndex) {
              return ;
            }
            var value = Belt_Array.get(values$1, i);
            if (value !== undefined) {
              return Curry._1(onChange, Caml_option.valFromOption(value));
            }
            
          };
          var onClick = function (param) {
            
          };
          return React.createElement("button", {
                      key: label,
                      className: "mr-1 px-2 py-1 rounded inline-block  " + active,
                      disabled: disabled,
                      onClick: onClick,
                      onMouseDown: onMouseDown
                    }, label);
        }));
  return React.createElement("div", {
              className: (
                disabled ? "opacity-25" : ""
              ) + "flex w-full"
            }, elements);
}

function Playground$ResultPane$PreWrap(Props) {
  var classNameOpt = Props.className;
  var children = Props.children;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  return React.createElement("pre", {
              className: "whitespace-pre-wrap " + className
            }, children);
}

function compactErrorLine(highlightOpt, prefix, locMsg) {
  var highlight = highlightOpt !== undefined ? highlightOpt : false;
  var prefixColor = prefix === "W" ? "text-orange" : "text-fire";
  var prefixText = prefix === "W" ? "[W]" : "[E]";
  var highlightClass = highlight ? (
      prefix === "W" ? "bg-orange-15" : "bg-fire-90 rounded"
    ) : "";
  return React.createElement("div", {
              className: "font-mono mb-4 pb-6 last:mb-0 last:pb-0 last:border-0 border-b border-gray-80 "
            }, React.createElement("div", {
                  className: "p-2 " + highlightClass
                }, React.createElement("span", {
                      className: prefixColor
                    }, prefixText), React.createElement("span", {
                      className: "font-medium text-gray-40"
                    }, " Line " + locMsg.row + ", column " + locMsg.column + ":"), React.createElement(AnsiPre.make, {
                      className: "whitespace-pre-wrap ",
                      children: locMsg.shortMsg
                    })));
}

function isHighlighted(focusedRowCol, locMsg) {
  if (focusedRowCol !== undefined && focusedRowCol[0] === locMsg.row) {
    return focusedRowCol[1] === locMsg.column;
  } else {
    return false;
  }
}

function filterHighlightedLocMsgs(focusedRowCol, locMsgs) {
  if (focusedRowCol === undefined) {
    return locMsgs;
  }
  var fCol = focusedRowCol[1];
  var fRow = focusedRowCol[0];
  var filtered = Belt_Array.keep(locMsgs, (function (locMsg) {
          if (fRow === locMsg.row) {
            return fCol === locMsg.column;
          } else {
            return false;
          }
        }));
  if (filtered.length === 0) {
    return locMsgs;
  } else {
    return filtered;
  }
}

function filterHighlightedLocWarnings(focusedRowCol, warnings) {
  if (focusedRowCol === undefined) {
    return warnings;
  }
  var fCol = focusedRowCol[1];
  var fRow = focusedRowCol[0];
  var filtered = Belt_Array.keep(warnings, (function (warning) {
          var details = warning.details;
          if (fRow === details.row) {
            return fCol === details.column;
          } else {
            return false;
          }
        }));
  if (filtered.length === 0) {
    return warnings;
  } else {
    return filtered;
  }
}

function renderResult(focusedRowCol, targetLang, compilerVersion, result) {
  var msg;
  var json;
  if (typeof result === "number") {
    var syntax = RescriptCompilerApi.Lang.toString(targetLang);
    return React.createElement(Playground$ResultPane$PreWrap, {
                children: "This playground is now running on compiler version " + compilerVersion + " with " + syntax + " syntax"
              });
  }
  if (result.TAG === /* Conv */0) {
    var msg$1 = result._0;
    switch (msg$1.TAG | 0) {
      case /* Success */0 :
          var match = msg$1._0;
          var toLang = match.toLang;
          var msg$2;
          if (match.fromLang === toLang) {
            msg$2 = "Formatting completed with 0 errors";
          } else {
            var toStr = RescriptCompilerApi.Lang.toString(toLang);
            msg$2 = "Switched to " + toStr + " with 0 errors";
          }
          return React.createElement(Playground$ResultPane$PreWrap, {
                      children: msg$2
                    });
      case /* Fail */1 :
          var toLang$1 = msg$1.toLang;
          var fromLang = msg$1.fromLang;
          var errs = Belt_Array.mapWithIndex(filterHighlightedLocMsgs(focusedRowCol, msg$1.details), (function (i, locMsg) {
                  return React.createElement("div", {
                              key: String(i)
                            }, compactErrorLine(isHighlighted(focusedRowCol, locMsg), "E", locMsg));
                }));
          var msg$3;
          if (fromLang === toLang$1) {
            var langStr = RescriptCompilerApi.Lang.toString(toLang$1);
            msg$3 = "The code is not valid " + langStr + " syntax.";
          } else {
            var fromStr = RescriptCompilerApi.Lang.toString(fromLang);
            var toStr$1 = RescriptCompilerApi.Lang.toString(toLang$1);
            msg$3 = "Could not convert from \"" + fromStr + "\" to \"" + toStr$1 + "\" due to malformed syntax:";
          }
          return React.createElement("div", undefined, React.createElement(Playground$ResultPane$PreWrap, {
                          className: "text-16 mb-4",
                          children: msg$3
                        }), errs);
      case /* UnexpectedError */2 :
          return msg$1._0;
      case /* Unknown */3 :
          msg = msg$1._0;
          json = msg$1._1;
          break;
      
    }
  } else {
    var result$1 = result._0;
    switch (result$1.TAG | 0) {
      case /* Fail */0 :
          var result$2 = result$1._0;
          switch (result$2.TAG | 0) {
            case /* WarningErr */2 :
                return Belt_Array.mapWithIndex(filterHighlightedLocWarnings(focusedRowCol, result$2._0), (function (i, warning) {
                              var match;
                              match = warning.TAG === /* Warn */0 ? [
                                  "W",
                                  warning.details
                                ] : [
                                  "E",
                                  warning.details
                                ];
                              var details = match[1];
                              return React.createElement("div", {
                                          key: String(i)
                                        }, compactErrorLine(isHighlighted(focusedRowCol, details), match[0], details));
                            }));
            case /* WarningFlagErr */3 :
                return React.createElement("div", undefined, "There are some issues with your compiler flag configuration:", result$2._0.msg);
            default:
              return Belt_Array.mapWithIndex(filterHighlightedLocMsgs(focusedRowCol, result$2._0), (function (i, locMsg) {
                            return React.createElement("div", {
                                        key: String(i)
                                      }, compactErrorLine(isHighlighted(focusedRowCol, locMsg), "E", locMsg));
                          }));
          }
      case /* Success */1 :
          var warnings = result$1._0.warnings;
          if (warnings.length === 0) {
            return React.createElement(Playground$ResultPane$PreWrap, {
                        children: "0 Errors, 0 Warnings"
                      });
          } else {
            return Belt_Array.mapWithIndex(filterHighlightedLocWarnings(focusedRowCol, warnings), (function (i, warning) {
                          var match;
                          match = warning.TAG === /* Warn */0 ? [
                              "W",
                              warning.details
                            ] : [
                              "E",
                              warning.details
                            ];
                          var details = match[1];
                          return React.createElement("div", {
                                      key: String(i)
                                    }, compactErrorLine(isHighlighted(focusedRowCol, details), match[0], details));
                        }));
          }
      case /* UnexpectedError */2 :
          return result$1._0;
      case /* Unknown */3 :
          msg = result$1._0;
          json = result$1._1;
          break;
      
    }
  }
  var subheader = "font-bold text-gray-40 text-16";
  return React.createElement("div", undefined, React.createElement(Playground$ResultPane$PreWrap, {
                  children: null
                }, "The compiler bundle API returned a result that couldn't be interpreted. Please open an issue on our ", React.createElement(Markdown.A.make, {
                      href: "https://github.com/rescript-association/rescript-lang.org/issues",
                      children: "issue tracker"
                    }), "."), React.createElement("div", {
                  className: "mt-4"
                }, React.createElement(Playground$ResultPane$PreWrap, {
                      children: null
                    }, React.createElement("div", {
                          className: subheader
                        }, "Message: "), msg)), React.createElement("div", {
                  className: "mt-4"
                }, React.createElement(Playground$ResultPane$PreWrap, {
                      children: null
                    }, React.createElement("span", {
                          className: subheader
                        }, "Received JSON payload:"), React.createElement("div", undefined, Util.Json.prettyStringify(json)))));
}

function renderTitle(result) {
  var errClass = "text-fire";
  var warnClass = "text-orange";
  var okClass = "text-turtle-dark";
  var match;
  if (typeof result === "number") {
    match = [
      okClass,
      "Ready"
    ];
  } else if (result.TAG === /* Conv */0) {
    switch (result._0.TAG | 0) {
      case /* Success */0 :
          match = [
            okClass,
            "Format Successful"
          ];
          break;
      case /* Fail */1 :
          match = [
            errClass,
            "Syntax Errors"
          ];
          break;
      case /* UnexpectedError */2 :
          match = [
            errClass,
            "Unexpected Error"
          ];
          break;
      case /* Unknown */3 :
          match = [
            errClass,
            "Unknown Result"
          ];
          break;
      
    }
  } else {
    var result$1 = result._0;
    switch (result$1.TAG | 0) {
      case /* Fail */0 :
          switch (result$1._0.TAG | 0) {
            case /* SyntaxErr */0 :
                match = [
                  errClass,
                  "Syntax Errors"
                ];
                break;
            case /* TypecheckErr */1 :
                match = [
                  errClass,
                  "Type Errors"
                ];
                break;
            case /* WarningErr */2 :
                match = [
                  warnClass,
                  "Warning Errors"
                ];
                break;
            case /* WarningFlagErr */3 :
                match = [
                  errClass,
                  "Config Error"
                ];
                break;
            case /* OtherErr */4 :
                match = [
                  errClass,
                  "Errors"
                ];
                break;
            
          }
          break;
      case /* Success */1 :
          var warningNum = result$1._0.warnings.length;
          match = warningNum === 0 ? [
              okClass,
              "Compiled successfully"
            ] : [
              warnClass,
              "Compiled with " + (String(warningNum) + " Warning(s)")
            ];
          break;
      case /* UnexpectedError */2 :
          match = [
            errClass,
            "Unexpected Error"
          ];
          break;
      case /* Unknown */3 :
          match = [
            errClass,
            "Unknown Result"
          ];
          break;
      
    }
  }
  return React.createElement("span", {
              className: match[0]
            }, match[1]);
}

function Playground$ResultPane(Props) {
  var targetLang = Props.targetLang;
  var compilerVersion = Props.compilerVersion;
  var focusedRowCol = Props.focusedRowCol;
  var result = Props.result;
  return React.createElement("div", {
              className: "pt-4 bg-0 overflow-y-auto"
            }, React.createElement("div", {
                  className: "flex items-center text-16 font-medium px-4"
                }, React.createElement("div", {
                      className: "pr-4"
                    }, renderTitle(result))), React.createElement("div", {
                  className: ""
                }, React.createElement("div", {
                      className: "text-gray-20 px-4 py-4"
                    }, renderResult(focusedRowCol, targetLang, compilerVersion, result))));
}

function updateInput(prev, input) {
  var suggestion;
  if (input === "") {
    suggestion = /* NoSuggestion */0;
  } else {
    var last = input.length - 1 | 0;
    var match = input[last];
    var exit = 0;
    switch (match) {
      case "+" :
      case "-" :
          exit = 1;
          break;
      default:
        var results = WarningFlagDescription.Parser.parse(input);
        if (results.TAG === /* Ok */0) {
          var tokens = results._0;
          var last$1 = Belt_Array.get(tokens, tokens.length - 1 | 0);
          if (last$1 !== undefined) {
            var results$1 = WarningFlagDescription.fuzzyLookup(last$1.flag);
            if (results$1.length === 0) {
              suggestion = {
                TAG: 1,
                _0: "No results",
                [Symbol.for("name")]: "ErrorSuggestion"
              };
            } else {
              var precedingTokens = Belt_Array.slice(tokens, 0, tokens.length - 1 | 0);
              var modifier = last$1.enabled ? "+" : "-";
              suggestion = {
                TAG: 0,
                modifier: modifier,
                precedingTokens: precedingTokens,
                results: results$1,
                selected: 0,
                [Symbol.for("name")]: "FuzzySuggestions"
              };
            }
          } else {
            suggestion = /* NoSuggestion */0;
          }
        } else {
          var exit$1 = 0;
          switch (input) {
            case "+" :
            case "-" :
                exit$1 = 2;
                break;
            default:
              suggestion = {
                TAG: 1,
                _0: results._0,
                [Symbol.for("name")]: "ErrorSuggestion"
              };
          }
          if (exit$1 === 2) {
            var results$2 = WarningFlagDescription.lookupAll(undefined);
            suggestion = {
              TAG: 0,
              modifier: input,
              precedingTokens: [],
              results: results$2,
              selected: 0,
              [Symbol.for("name")]: "FuzzySuggestions"
            };
          }
          
        }
    }
    if (exit === 1) {
      var results$3 = WarningFlagDescription.lookupAll(undefined);
      var partial = input.substring(0, last);
      var tokens$1 = WarningFlagDescription.Parser.parse(partial);
      var precedingTokens$1;
      precedingTokens$1 = tokens$1.TAG === /* Ok */0 ? tokens$1._0 : [];
      suggestion = {
        TAG: 0,
        modifier: match,
        precedingTokens: precedingTokens$1,
        results: results$3,
        selected: 0,
        [Symbol.for("name")]: "FuzzySuggestions"
      };
    }
    
  }
  switch (prev.TAG | 0) {
    case /* HideSuggestion */0 :
    case /* ShowTokenHint */1 :
    case /* Typing */2 :
        return {
                TAG: 2,
                suggestion: suggestion,
                input: input,
                [Symbol.for("name")]: "Typing"
              };
    
  }
}

function Playground$WarningFlagsWidget(Props) {
  var onUpdate = Props.onUpdate;
  var flags = Props.flags;
  var match = React.useState(function () {
        return {
                TAG: 0,
                input: "",
                [Symbol.for("name")]: "HideSuggestion"
              };
      });
  var setState = match[1];
  var state = match[0];
  var listboxRef = React.useRef(null);
  var inputRef = React.useRef(null);
  var chips = Belt_Array.mapWithIndex(flags, (function (i, token) {
          var flag = token.flag;
          var enabled = token.enabled;
          var isActive;
          switch (state.TAG | 0) {
            case /* ShowTokenHint */1 :
                isActive = state.token.flag === flag;
                break;
            case /* HideSuggestion */0 :
            case /* Typing */2 :
                isActive = false;
                break;
            
          }
          var full = (
            enabled ? "+" : "-"
          ) + flag;
          var color = enabled ? (
              isActive ? "bg-gray-40 text-turtle-dark" : "text-turtle-dark"
            ) : (
              isActive ? "bg-gray-40 text-fire" : "text-fire"
            );
          var hoverEnabled;
          switch (state.TAG | 0) {
            case /* HideSuggestion */0 :
                hoverEnabled = false;
                break;
            case /* ShowTokenHint */1 :
            case /* Typing */2 :
                hoverEnabled = true;
                break;
            
          }
          var match;
          if (hoverEnabled) {
            var enter = function (evt) {
              evt.preventDefault();
              evt.stopPropagation();
              Curry._1(setState, (function (prev) {
                      return {
                              TAG: 1,
                              lastState: prev,
                              token: token,
                              [Symbol.for("name")]: "ShowTokenHint"
                            };
                    }));
            };
            var leave = function (evt) {
              evt.preventDefault();
              evt.stopPropagation();
              Curry._1(setState, (function (prev) {
                      switch (prev.TAG | 0) {
                        case /* ShowTokenHint */1 :
                            return prev.lastState;
                        case /* HideSuggestion */0 :
                        case /* Typing */2 :
                            return prev;
                        
                      }
                    }));
            };
            match = [
              enter,
              leave
            ];
          } else {
            match = [
              undefined,
              undefined
            ];
          }
          var onClick = function (evt) {
            evt.preventDefault();
            Curry._1(onUpdate, Belt_Array.keep(flags, (function (t) {
                        return t.flag !== flag;
                      })));
          };
          var tmp = {
            key: String(i) + flag,
            className: color + " hover:cursor-default text-16 inline-block border border-gray-40 rounded-full px-2 mr-1",
            onClick: onClick
          };
          var tmp$1 = match[0];
          if (tmp$1 !== undefined) {
            tmp.onMouseEnter = Caml_option.valFromOption(tmp$1);
          }
          var tmp$2 = match[1];
          if (tmp$2 !== undefined) {
            tmp.onMouseLeave = Caml_option.valFromOption(tmp$2);
          }
          return React.createElement("span", tmp, full);
        }));
  var onKeyDown = function (evt) {
    var key = evt.key;
    var ctrlKey = evt.ctrlKey;
    var full = (
      ctrlKey ? "CTRL+" : ""
    ) + key;
    var exit = 0;
    switch (full) {
      case "ArrowLeft" :
      case "ArrowRight" :
          return ;
      case "ArrowDown" :
      case "CTRL+n" :
          exit = 1;
          break;
      case "ArrowUp" :
      case "CTRL+p" :
          exit = 2;
          break;
      case "Enter" :
          switch (state.TAG | 0) {
            case /* HideSuggestion */0 :
            case /* ShowTokenHint */1 :
                break;
            case /* Typing */2 :
                var match = state.suggestion;
                if (typeof match !== "number" && match.TAG === /* FuzzySuggestions */0) {
                  var match$1 = Belt_Array.get(match.results, match.selected);
                  if (match$1 !== undefined) {
                    var token_enabled = match.modifier === "+";
                    var token_flag = match$1[0];
                    var token = {
                      enabled: token_enabled,
                      flag: token_flag
                    };
                    var newTokens = Belt_Array.concat(match.precedingTokens, [token]);
                    var all = WarningFlagDescription.Parser.merge(flags, newTokens);
                    Curry._1(onUpdate, all);
                    Curry._1(setState, (function (prev) {
                            return updateInput(prev, "");
                          }));
                  }
                  
                }
                break;
            
          }
          evt.preventDefault();
          return ;
      case "Escape" :
          return Belt_Option.forEach(Caml_option.nullable_to_opt(inputRef.current), (function (el) {
                        el.blur();
                      }));
      case "Tab" :
          switch (state.TAG | 0) {
            case /* HideSuggestion */0 :
            case /* ShowTokenHint */1 :
                return ;
            case /* Typing */2 :
                var match$2 = state.suggestion;
                if (typeof match$2 === "number") {
                  return ;
                }
                if (match$2.TAG !== /* FuzzySuggestions */0) {
                  return ;
                }
                var match$3 = Belt_Array.get(match$2.results, match$2.selected);
                if (match$3 !== undefined) {
                  var flag = match$2.modifier + match$3[0];
                  var completed = WarningFlagDescription.Parser.tokensToString(match$2.precedingTokens) + flag;
                  Curry._1(setState, (function (prev) {
                          return updateInput(prev, completed);
                        }));
                }
                evt.preventDefault();
                return ;
            
          }
      default:
        switch (state.TAG | 0) {
          case /* HideSuggestion */0 :
          case /* ShowTokenHint */1 :
              console.log(full);
              return ;
          case /* Typing */2 :
              var tmp = state.suggestion;
              if (typeof tmp === "number") {
                console.log(full);
                return ;
              }
              if (tmp.TAG !== /* FuzzySuggestions */0) {
                if (full !== "Backspace") {
                  evt.preventDefault();
                  return ;
                } else {
                  return ;
                }
              }
              console.log(full);
              return ;
          
        }
    }
    switch (exit) {
      case 1 :
          Curry._1(setState, (function (prev) {
                  switch (prev.TAG | 0) {
                    case /* HideSuggestion */0 :
                    case /* ShowTokenHint */1 :
                        return prev;
                    case /* Typing */2 :
                        var suggestion = prev.suggestion;
                        if (typeof suggestion === "number") {
                          return prev;
                        }
                        if (suggestion.TAG !== /* FuzzySuggestions */0) {
                          return prev;
                        }
                        var selected = suggestion.selected;
                        var nextIdx = selected < (suggestion.results.length - 1 | 0) ? selected + 1 | 0 : 0;
                        return {
                                TAG: 2,
                                suggestion: {
                                  TAG: 0,
                                  modifier: suggestion.modifier,
                                  precedingTokens: suggestion.precedingTokens,
                                  results: suggestion.results,
                                  selected: nextIdx,
                                  [Symbol.for("name")]: "FuzzySuggestions"
                                },
                                input: prev.input,
                                [Symbol.for("name")]: "Typing"
                              };
                    
                  }
                }));
          evt.preventDefault();
          return ;
      case 2 :
          Curry._1(setState, (function (prev) {
                  switch (prev.TAG | 0) {
                    case /* HideSuggestion */0 :
                    case /* ShowTokenHint */1 :
                        return prev;
                    case /* Typing */2 :
                        var suggestion = prev.suggestion;
                        if (typeof suggestion === "number") {
                          return prev;
                        }
                        if (suggestion.TAG !== /* FuzzySuggestions */0) {
                          return prev;
                        }
                        var selected = suggestion.selected;
                        var nextIdx = selected > 0 ? selected - 1 | 0 : suggestion.results.length - 1 | 0;
                        return {
                                TAG: 2,
                                suggestion: {
                                  TAG: 0,
                                  modifier: suggestion.modifier,
                                  precedingTokens: suggestion.precedingTokens,
                                  results: suggestion.results,
                                  selected: nextIdx,
                                  [Symbol.for("name")]: "FuzzySuggestions"
                                },
                                input: prev.input,
                                [Symbol.for("name")]: "Typing"
                              };
                    
                  }
                }));
          evt.preventDefault();
          return ;
      
    }
  };
  var suggestions;
  switch (state.TAG | 0) {
    case /* HideSuggestion */0 :
        suggestions = undefined;
        break;
    case /* ShowTokenHint */1 :
        var token = state.token;
        suggestions = Caml_option.some(Belt_Array.map(WarningFlagDescription.lookup(token.flag), (function (param) {
                    var match = token.enabled ? [
                        "(Enabled) ",
                        "text-turtle-dark"
                      ] : [
                        "(Disabled) ",
                        "text-fire"
                      ];
                    return React.createElement("div", {
                                key: param[0]
                              }, React.createElement("span", {
                                    className: match[1]
                                  }, match[0]), param[1]);
                  })));
        break;
    case /* Typing */2 :
        var msg = state.suggestion;
        var tmp;
        if (typeof msg === "number") {
          tmp = "Type + / - followed by a number or letter (e.g. +a+1)";
        } else if (msg.TAG === /* FuzzySuggestions */0) {
          var selected = msg.selected;
          var precedingTokens = msg.precedingTokens;
          var modifier = msg.modifier;
          tmp = Belt_Array.mapWithIndex(msg.results, (function (i, param) {
                  var flag = param[0];
                  var activeClass = selected === i ? "bg-gray-40" : "";
                  var ref = selected === i ? Caml_option.some(function (dom) {
                          var parent = listboxRef.current;
                          if (!(parent == null) && !(dom == null)) {
                            if (parent.scrollHeight <= parent.clientHeight) {
                              return ;
                            }
                            var scrollBottom = parent.clientHeight + parent.scrollTop | 0;
                            var elementBottom = dom.offsetTop + dom.offsetHeight | 0;
                            if (elementBottom > scrollBottom) {
                              parent.scrollTop = elementBottom - parent.clientHeight | 0;
                              return ;
                            } else if ((dom.offsetTop - dom.offsetHeight | 0) < parent.scrollTop) {
                              parent.scrollTop = dom.offsetTop - dom.offsetHeight | 0;
                              return ;
                            } else {
                              return ;
                            }
                          }
                          
                        }) : undefined;
                  var onMouseEnter = function (evt) {
                    evt.preventDefault();
                    Curry._1(setState, (function (prev) {
                            switch (prev.TAG | 0) {
                              case /* HideSuggestion */0 :
                              case /* ShowTokenHint */1 :
                                  return prev;
                              case /* Typing */2 :
                                  var fuzzySuggestion = prev.suggestion;
                                  if (typeof fuzzySuggestion === "number" || fuzzySuggestion.TAG !== /* FuzzySuggestions */0) {
                                    return prev;
                                  } else {
                                    return {
                                            TAG: 2,
                                            suggestion: {
                                              TAG: 0,
                                              modifier: fuzzySuggestion.modifier,
                                              precedingTokens: fuzzySuggestion.precedingTokens,
                                              results: fuzzySuggestion.results,
                                              selected: i,
                                              [Symbol.for("name")]: "FuzzySuggestions"
                                            },
                                            input: state.input,
                                            [Symbol.for("name")]: "Typing"
                                          };
                                  }
                              
                            }
                          }));
                  };
                  var onClick = function (evt) {
                    evt.preventDefault();
                    Curry._1(setState, (function (prev) {
                            switch (prev.TAG | 0) {
                              case /* HideSuggestion */0 :
                              case /* ShowTokenHint */1 :
                                  return prev;
                              case /* Typing */2 :
                                  var full = modifier + flag;
                                  var completed = WarningFlagDescription.Parser.tokensToString(precedingTokens) + full;
                                  return updateInput(prev, completed);
                              
                            }
                          }));
                  };
                  var tmp = {
                    key: flag,
                    className: activeClass,
                    onMouseDown: onClick,
                    onMouseEnter: onMouseEnter
                  };
                  if (ref !== undefined) {
                    tmp.ref = Caml_option.valFromOption(ref);
                  }
                  return React.createElement("div", tmp, modifier + (flag + (": " + param[1])));
                }));
        } else {
          tmp = msg._0;
        }
        suggestions = Caml_option.some(tmp);
        break;
    
  }
  var suggestionBox = Belt_Option.getWithDefault(Belt_Option.map(suggestions, (function (elements) {
              return React.createElement("div", {
                          ref: listboxRef,
                          className: "p-2 absolute overflow-auto z-50 border-b rounded border-l border-r block w-full bg-gray-100",
                          style: {
                            maxHeight: "15rem"
                          }
                        }, elements);
            })), null);
  var onChange = function (evt) {
    evt.preventDefault();
    var input = evt.target.value;
    Curry._1(setState, (function (prev) {
            return updateInput(prev, input);
          }));
  };
  var onBlur = function (evt) {
    evt.preventDefault();
    evt.stopPropagation();
    Curry._1(setState, (function (prev) {
            switch (prev.TAG | 0) {
              case /* HideSuggestion */0 :
                  return prev;
              case /* ShowTokenHint */1 :
                  var match = prev.lastState;
                  switch (match.TAG | 0) {
                    case /* HideSuggestion */0 :
                    case /* ShowTokenHint */1 :
                        return {
                                TAG: 0,
                                input: "",
                                [Symbol.for("name")]: "HideSuggestion"
                              };
                    case /* Typing */2 :
                        return {
                                TAG: 0,
                                input: match.input,
                                [Symbol.for("name")]: "HideSuggestion"
                              };
                    
                  }
              case /* Typing */2 :
                  return {
                          TAG: 0,
                          input: prev.input,
                          [Symbol.for("name")]: "HideSuggestion"
                        };
              
            }
          }));
  };
  var onFocus = function (evt) {
    var input = evt.target.value;
    Curry._1(setState, (function (prev) {
            return updateInput(prev, input);
          }));
  };
  var isActive;
  switch (state.TAG | 0) {
    case /* HideSuggestion */0 :
        isActive = false;
        break;
    case /* ShowTokenHint */1 :
    case /* Typing */2 :
        isActive = true;
        break;
    
  }
  var deleteButton;
  var exit = 0;
  var len = flags.length;
  if (len !== 1) {
    if (len !== 0) {
      exit = 1;
    } else {
      deleteButton = null;
    }
  } else {
    var match$1 = flags[0];
    if (match$1.enabled || match$1.flag !== "a") {
      exit = 1;
    } else {
      deleteButton = null;
    }
  }
  if (exit === 1) {
    var onMouseDown = function (evt) {
      evt.preventDefault();
      Curry._1(onUpdate, [{
              enabled: false,
              flag: "a"
            }]);
    };
    var onClick = function (param) {
      
    };
    var onFocus$1 = function (evt) {
      evt.preventDefault();
      evt.stopPropagation();
    };
    deleteButton = React.createElement("button", {
          className: "focus:outline-none self-start focus:ring hover:cursor-pointer hover:bg-gray-40 p-2 rounded-full",
          tabIndex: 0,
          onFocus: onFocus$1,
          onClick: onClick,
          onMouseDown: onMouseDown
        }, React.createElement(Icon.Close.make, {}));
  }
  var activeClass = isActive ? "border-white" : "border-gray-60";
  var areaOnFocus = function (_evt) {
    if (!isActive) {
      return Belt_Option.forEach(Caml_option.nullable_to_opt(inputRef.current), (function (el) {
                    el.focus();
                  }));
    }
    
  };
  var inputValue;
  switch (state.TAG | 0) {
    case /* HideSuggestion */0 :
        inputValue = state.input;
        break;
    case /* ShowTokenHint */1 :
        var match$2 = state.lastState;
        switch (match$2.TAG | 0) {
          case /* HideSuggestion */0 :
          case /* ShowTokenHint */1 :
              inputValue = "";
              break;
          case /* Typing */2 :
              inputValue = match$2.input;
              break;
          
        }
        break;
    case /* Typing */2 :
        inputValue = state.input;
        break;
    
  }
  return React.createElement("div", {
              className: "relative",
              tabIndex: -1,
              onKeyDown: onKeyDown,
              onFocus: areaOnFocus
            }, React.createElement("div", {
                  className: "flex justify-between border p-2 " + activeClass
                }, React.createElement("div", undefined, chips, React.createElement("input", {
                          ref: inputRef,
                          className: "outline-none bg-gray-90 placeholder-gray-20 placeholder-opacity-50",
                          tabIndex: 0,
                          placeholder: "Flags",
                          type: "text",
                          value: inputValue,
                          onFocus: onFocus,
                          onBlur: onBlur,
                          onChange: onChange
                        })), deleteButton), suggestionBox);
}

function Playground$Settings(Props) {
  var readyState = Props.readyState;
  var dispatch = Props.dispatch;
  var setConfig = Props.setConfig;
  var editorCode = Props.editorCode;
  var config = Props.config;
  var availableTargetLangs = RescriptCompilerApi.Version.availableLanguages(readyState.selected.apiVersion);
  var onTargetLangSelect = function (lang) {
    Curry._1(dispatch, {
          TAG: 1,
          lang: lang,
          code: editorCode.current,
          [Symbol.for("name")]: "SwitchLanguage"
        });
  };
  var onWarningFlagsUpdate = function (flags) {
    var normalizeEmptyFlags = function (flags) {
      if (flags.length !== 0) {
        return flags;
      } else {
        return [{
                  enabled: false,
                  flag: "a"
                }];
      }
    };
    var newrecord = Caml_obj.obj_dup(config);
    newrecord.warn_flags = WarningFlagDescription.Parser.tokensToString(normalizeEmptyFlags(flags));
    Curry._1(setConfig, newrecord);
  };
  var onModuleSystemUpdate = function (module_system) {
    var newrecord = Caml_obj.obj_dup(config);
    newrecord.module_system = module_system;
    Curry._1(setConfig, newrecord);
  };
  var warnFlagTokens = Belt_Result.getWithDefault(WarningFlagDescription.Parser.parse(config.warn_flags), []);
  var onResetClick = function (evt) {
    evt.preventDefault();
    Curry._1(setConfig, {
          module_system: "nodejs",
          warn_flags: "+a-4-9-20-40-41-42-50-61-102-109"
        });
  };
  var titleClass = "hl-5 text-gray-20 mb-2";
  var experimentalVersions = readyState.experimentalVersions;
  return React.createElement("div", {
              className: "p-4 pt-8 text-gray-20"
            }, React.createElement("div", undefined, React.createElement("div", {
                      className: titleClass
                    }, "ReScript Version"), React.createElement(Playground$DropdownSelect, {
                      onChange: (function (evt) {
                          evt.preventDefault();
                          var id = evt.target.value;
                          Curry._1(dispatch, {
                                TAG: 0,
                                _0: id,
                                [Symbol.for("name")]: "SwitchToCompiler"
                              });
                        }),
                      name: "compilerVersions",
                      value: readyState.selected.id,
                      children: null
                    }, experimentalVersions.length !== 0 ? React.createElement(React.Fragment, undefined, React.createElement("option", {
                                className: "py-4",
                                disabled: true
                              }, "---Experimental---"), Belt_Array.map(experimentalVersions, (function (version) {
                                  return React.createElement("option", {
                                              key: version,
                                              className: "py-4",
                                              value: version
                                            }, version);
                                })), React.createElement("option", {
                                className: "py-4",
                                disabled: true
                              }, "---Official Releases---")) : null, Belt_Array.map(readyState.versions, (function (version) {
                            return React.createElement("option", {
                                        key: version,
                                        className: "py-4",
                                        value: version
                                      }, version);
                          })))), React.createElement("div", {
                  className: "mt-6"
                }, React.createElement("div", {
                      className: titleClass
                    }, "Syntax"), React.createElement(Playground$ToggleSelection, {
                      onChange: onTargetLangSelect,
                      values: availableTargetLangs,
                      toLabel: (function (lang) {
                          return RescriptCompilerApi.Lang.toExt(lang).toUpperCase();
                        }),
                      selected: readyState.targetLang
                    })), React.createElement("div", {
                  className: "mt-6"
                }, React.createElement("div", {
                      className: titleClass
                    }, "Module-System"), React.createElement(Playground$ToggleSelection, {
                      onChange: onModuleSystemUpdate,
                      values: [
                        "nodejs",
                        "es6"
                      ],
                      toLabel: (function (value) {
                          return value;
                        }),
                      selected: config.module_system
                    })), React.createElement("div", {
                  className: "mt-6"
                }, React.createElement("div", {
                      className: titleClass
                    }, "Loaded Libraries"), React.createElement("ul", undefined, Belt_Array.map(readyState.selected.libraries, (function (lib) {
                            return React.createElement("li", {
                                        key: lib,
                                        className: "ml-2"
                                      }, lib);
                          })))), React.createElement("div", {
                  className: "mt-8"
                }, React.createElement("div", {
                      className: titleClass
                    }, "Warning Flags", React.createElement("button", {
                          className: "ml-6 text-12 " + $$Text.Link.standalone,
                          onMouseDown: onResetClick
                        }, "[reset]")), React.createElement("div", {
                      className: "flex justify-end"
                    }), React.createElement("div", {
                      style: {
                        maxWidth: "40rem"
                      }
                    }, React.createElement(Playground$WarningFlagsWidget, {
                          onUpdate: onWarningFlagsUpdate,
                          flags: warnFlagTokens
                        }))));
}

function Playground$ControlPanel$Button(Props) {
  var children = Props.children;
  var onClick = Props.onClick;
  var tmp = {
    className: "inline-block text-sky hover:cursor-pointer hover:bg-sky hover:text-white-80-tr rounded border active:bg-sky-70 border-sky-70 px-2 py-1 "
  };
  if (onClick !== undefined) {
    tmp.onClick = Caml_option.valFromOption(onClick);
  }
  return React.createElement("button", tmp, children);
}

var copyToClipboard = (function(str) {
      try {
      const el = document.createElement('textarea');
      el.value = str;
      el.setAttribute('readonly', '');
      el.style.position = 'absolute';
      el.style.left = '-9999px';
      document.body.appendChild(el);
      const selected =
        document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;
      el.select();
      document.execCommand('copy');
      document.body.removeChild(el);
      if (selected) {
        document.getSelection().removeAllRanges();
        document.getSelection().addRange(selected);
      }
      return true;
      } catch(e) {
        return false;
      }
    });

function Playground$ControlPanel$ShareButton(Props) {
  var createShareLink = Props.createShareLink;
  var actionIndicatorKey = Props.actionIndicatorKey;
  var match = React.useState(function () {
        return /* Init */0;
      });
  var setState = match[1];
  React.useEffect((function () {
          Curry._1(setState, (function (param) {
                  return /* Init */0;
                }));
        }), [actionIndicatorKey]);
  var onClick = function (evt) {
    evt.preventDefault();
    var url = Curry._1(createShareLink, undefined);
    var ret = copyToClipboard(url);
    if (ret) {
      return Curry._1(setState, (function (param) {
                    return /* CopySuccess */1;
                  }));
    }
    
  };
  var match$1 = match[0] ? [
      "Copied to clipboard!",
      "bg-turtle-dark border-turtle-dark"
    ] : [
      "Copy Share Link",
      " bg-sky body-xs active:bg-sky-70 border-sky-70"
    ];
  return React.createElement(React.Fragment, undefined, React.createElement("button", {
                  className: match$1[1] + " w-40 transition-all duration-500 ease-in-out inline-block hover:cursor-pointer hover:text-white-80 text-white rounded border px-2 py-1 ",
                  onClick: onClick
                }, match$1[0]));
}

function Playground$ControlPanel(Props) {
  var actionIndicatorKey = Props.actionIndicatorKey;
  var state = Props.state;
  var dispatch = Props.dispatch;
  var editorCode = Props.editorCode;
  var router = Next.Router.useRouter(undefined);
  var children;
  var exit = 0;
  if (typeof state === "number") {
    children = "Initializing...";
  } else {
    switch (state.TAG | 0) {
      case /* SetupFailed */0 :
          children = null;
          break;
      case /* SwitchingCompiler */1 :
          children = "Switching Compiler...";
          break;
      case /* Ready */2 :
      case /* Compiling */3 :
          exit = 1;
          break;
      
    }
  }
  if (exit === 1) {
    var ready = state._0;
    var onFormatClick = function (evt) {
      evt.preventDefault();
      Curry._1(dispatch, {
            TAG: 2,
            _0: editorCode.current,
            [Symbol.for("name")]: "Format"
          });
    };
    var createShareLink = function (param) {
      var lang = ready.targetLang;
      var params = lang >= 2 ? [] : [[
            "ext",
            RescriptCompilerApi.Lang.toExt(lang)
          ]];
      var version = ready.selected.compilerVersion;
      params.push([
            "version",
            "v" + version
          ]);
      params.push([
            "code",
            LzString.compressToEncodedURIComponent(editorCode.current)
          ]);
      var querystring = params.map(function (param) {
              return param[0] + "=" + param[1];
            }).join("&");
      var url = window.location.origin + router.route + "?" + querystring;
      Next.Router.replace(router, url);
      return url;
    };
    children = React.createElement(React.Fragment, undefined, React.createElement("div", {
              className: "mr-2"
            }, React.createElement(Playground$ControlPanel$Button, {
                  children: "Format",
                  onClick: onFormatClick
                })), React.createElement(Playground$ControlPanel$ShareButton, {
              createShareLink: createShareLink,
              actionIndicatorKey: actionIndicatorKey
            }));
  }
  return React.createElement("div", {
              className: "flex justify-start items-center bg-gray-100 py-3 px-11"
            }, children);
}

function locMsgToCmError(kind, locMsg) {
  return {
          row: locMsg.row,
          column: locMsg.column,
          endRow: locMsg.endRow,
          endColumn: locMsg.endColumn,
          text: locMsg.shortMsg,
          kind: kind
        };
}

function codeFromResult(result) {
  if (typeof result === "number") {
    return "/* No JS code generated */";
  }
  if (result.TAG === /* Conv */0) {
    return "/* No JS code generated */";
  }
  var comp = result._0;
  if (comp.TAG === /* Success */1) {
    return comp._0.js_code;
  } else {
    return "/* No JS code generated */";
  }
}

function Playground$OutputPanel(Props) {
  var compilerDispatch = Props.compilerDispatch;
  var compilerState = Props.compilerState;
  var editorCode = Props.editorCode;
  var currentTab = Props.currentTab;
  var prevState = React.useRef(undefined);
  var prev = prevState.current;
  var cmCode;
  if (prev !== undefined) {
    var exit = 0;
    var exit$1 = 0;
    if (typeof compilerState === "number") {
      cmCode = undefined;
    } else {
      switch (compilerState.TAG | 0) {
        case /* Ready */2 :
            if (typeof compilerState._0.result === "number") {
              cmCode = undefined;
            } else {
              exit$1 = 2;
            }
            break;
        case /* Compiling */3 :
            exit$1 = 2;
            break;
        default:
          cmCode = undefined;
      }
    }
    if (exit$1 === 2) {
      if (typeof prev === "number" || prev.TAG !== /* Ready */2) {
        exit = 1;
      } else {
        var result = prev._0.result;
        if (typeof compilerState !== "number") {
          if (compilerState.TAG === /* Ready */2) {
            var ready = compilerState._0;
            var match = ready.result;
            cmCode = typeof match === "number" || match.TAG === /* Conv */0 || match._0.TAG !== /* Success */1 ? undefined : codeFromResult(ready.result);
          } else {
            cmCode = typeof result === "number" || result.TAG === /* Conv */0 || result._0.TAG !== /* Success */1 ? undefined : codeFromResult(result);
          }
        }
        
      }
    }
    if (exit === 1 && typeof compilerState !== "number") {
      if (compilerState.TAG === /* Ready */2) {
        var result$1 = compilerState._0.result;
        if (typeof result$1 !== "number") {
          cmCode = result$1.TAG === /* Conv */0 || result$1._0.TAG !== /* Success */1 ? undefined : codeFromResult(result$1);
        }
        
      } else {
        cmCode = undefined;
      }
    }
    
  } else {
    cmCode = typeof compilerState === "number" || compilerState.TAG !== /* Ready */2 ? undefined : codeFromResult(compilerState._0.result);
  }
  prevState.current = compilerState;
  var resultPane;
  var exit$2 = 0;
  if (typeof compilerState === "number") {
    resultPane = null;
  } else {
    switch (compilerState.TAG | 0) {
      case /* Ready */2 :
      case /* Compiling */3 :
          exit$2 = 1;
          break;
      default:
        resultPane = null;
    }
  }
  if (exit$2 === 1) {
    var ready$1 = compilerState._0;
    var match$1 = ready$1.result;
    var exit$3 = 0;
    if (typeof match$1 === "number") {
      exit$3 = 2;
    } else if (match$1.TAG === /* Conv */0) {
      if (match$1._0.TAG === /* Success */0) {
        resultPane = null;
      } else {
        exit$3 = 2;
      }
    } else if (match$1._0.TAG === /* Success */1) {
      resultPane = null;
    } else {
      exit$3 = 2;
    }
    if (exit$3 === 2) {
      resultPane = React.createElement(Playground$ResultPane, {
            targetLang: ready$1.targetLang,
            compilerVersion: ready$1.selected.compilerVersion,
            result: ready$1.result
          });
    }
    
  }
  var match$2 = cmCode !== undefined ? [
      cmCode,
      true
    ] : [
      "",
      false
    ];
  var codeElement = React.createElement("pre", {
        className: "whitespace-pre-wrap p-4 " + (
          match$2[1] ? "block" : "hidden"
        )
      }, HighlightJs.renderHLJS(undefined, true, match$2[0], "js", undefined));
  var output = React.createElement("div", {
        className: "text-gray-20"
      }, resultPane, codeElement);
  var errorPane;
  if (typeof compilerState === "number") {
    errorPane = React.createElement("div", undefined, "Initalizing Playground...");
  } else if (compilerState.TAG === /* SetupFailed */0) {
    errorPane = React.createElement("div", undefined, "Setup failed: " + compilerState._0);
  } else {
    var ready$2 = compilerState._0;
    errorPane = React.createElement(Playground$ResultPane, {
          targetLang: ready$2.targetLang,
          compilerVersion: ready$2.selected.compilerVersion,
          result: ready$2.result
        });
  }
  var settingsPane;
  if (typeof compilerState === "number") {
    settingsPane = React.createElement("div", undefined, "Initalizing Playground...");
  } else if (compilerState.TAG === /* SetupFailed */0) {
    settingsPane = React.createElement("div", undefined, "Setup failed: " + compilerState._0);
  } else {
    var ready$3 = compilerState._0;
    var config = ready$3.selected.config;
    var setConfig = function (config) {
      Curry._1(compilerDispatch, {
            TAG: 4,
            _0: config,
            [Symbol.for("name")]: "UpdateConfig"
          });
    };
    settingsPane = React.createElement(Playground$Settings, {
          readyState: ready$3,
          dispatch: compilerDispatch,
          setConfig: setConfig,
          editorCode: editorCode,
          config: config
        });
  }
  var prevSelected = React.useRef(0);
  var selected;
  if (typeof compilerState === "number") {
    selected = 0;
  } else {
    switch (compilerState.TAG | 0) {
      case /* Ready */2 :
          var match$3 = compilerState._0.result;
          selected = typeof match$3 === "number" ? 1 : (
              match$3.TAG === /* Conv */0 ? (
                  match$3._0.TAG === /* Success */0 ? 0 : 1
                ) : (
                  match$3._0.TAG === /* Success */1 ? 0 : 1
                )
            );
          break;
      case /* Compiling */3 :
          selected = prevSelected.current;
          break;
      default:
        selected = 0;
    }
  }
  prevSelected.current = selected;
  var tabs = [
    [
      /* JavaScript */0,
      output
    ],
    [
      /* Problems */1,
      errorPane
    ],
    [
      /* Settings */2,
      settingsPane
    ]
  ];
  var body = Belt_Array.mapWithIndex(tabs, (function (i, param) {
          var className = currentTab === param[0] ? "block h-inherit" : "hidden";
          return React.createElement("div", {
                      key: String(i),
                      className: className
                    }, param[1]);
        }));
  return React.createElement(React.Fragment, undefined, body);
}

var original = "module Button = {\n  @react.component\n  let make = (~count: int) => {\n    let times = switch count {\n    | 1 => \"once\"\n    | 2 => \"twice\"\n    | n => Belt.Int.toString(n) ++ \" times\"\n    }\n    let msg = \"Click me \" ++ times\n\n    <button> {msg->React.string} </button>\n  }\n}\n";

function parseVersion(versionStr) {
  var match = versionStr.replace("v", "").split(".");
  if (match.length !== 3) {
    return ;
  }
  var major = match[0];
  var minor = match[1];
  var patch = match[2];
  var match$1 = Belt_Int.fromString(major);
  var match$2 = Belt_Int.fromString(minor);
  var match$3 = Belt_Int.fromString(patch);
  if (match$1 !== undefined && match$2 !== undefined && match$3 !== undefined) {
    return [
            match$1,
            match$2,
            match$3
          ];
  }
  
}

function Playground(Props) {
  var router = Next.Router.useRouter(undefined);
  var version = Js_dict.get(router.query, "version");
  var initialVersion = version !== undefined ? version : Belt_Array.get(CompilerManagerHook.CdnMeta.versions, 0);
  var match = Js_dict.get(router.query, "ext");
  var initialLang = match === "re" ? /* Reason */0 : /* Res */2;
  var match$1 = Js_dict.get(router.query, "code");
  var initialContent;
  var exit = 0;
  if (match$1 !== undefined) {
    initialContent = LzString.decompressFromEncodedURIComponent(match$1);
  } else {
    switch (initialLang) {
      case /* Reason */0 :
          initialContent = "Js.log(\"Hello Reason 3.6!\");";
          break;
      case /* OCaml */1 :
      case /* Res */2 :
          exit = 1;
          break;
      
    }
  }
  if (exit === 1) {
    if (initialVersion !== undefined) {
      var match$2 = parseVersion(initialVersion);
      initialContent = match$2 !== undefined && match$2[0] >= 10 && match$2[1] >= 1 ? "@@jsxConfig({ version: 4, mode: \"automatic\" })\n\nmodule CounterMessage = {\n  @react.component\n  let make = (~count, ~username=?) => {\n    let times = switch count {\n    | 1 => \"once\"\n    | 2 => \"twice\"\n    | n => Belt.Int.toString(n) ++ \" times\"\n    }\n\n    let name = switch username {\n    | Some(\"\") => \"Anonymous\"\n    | Some(name) => name\n    | None => \"Anonymous\"\n    }\n\n    <div> {React.string(\`Hello \$\{name\}, you clicked me \` ++ times)} </div>\n  }\n}\n\nmodule App = {\n  @react.component\n  let make = () => {\n    let (count, setCount) = React.useState(() => 0)\n    let (username, setUsername) = React.useState(() => \"Anonymous\")\n\n    <div>\n      {React.string(\"Username: \")}\n      <input\n        type_=\"text\"\n        value={username}\n        onChange={evt => {\n          evt->ReactEvent.Form.preventDefault\n          let username = (evt->ReactEvent.Form.target)[\"value\"]\n          setUsername(_prev => username)\n        }}\n      />\n      <button\n        onClick={_evt => {\n          setCount(prev => prev + 1)\n        }}>\n        {React.string(\"Click me\")}\n      </button>\n      <button onClick={_evt => setCount(_ => 0)}> {React.string(\"Reset\")} </button>\n      <CounterMessage count username />\n    </div>\n  }\n}\n" : original;
    } else {
      initialContent = original;
    }
  }
  var match$3 = React.useState(function () {
        return 0;
      });
  var setActionCount = match$3[1];
  var onAction = function (param) {
    Curry._1(setActionCount, (function (prev) {
            if (prev > 1000000) {
              return 0;
            } else {
              return prev + 1 | 0;
            }
          }));
  };
  var match$4 = CompilerManagerHook.useCompilerManager(initialVersion, initialLang, onAction, undefined);
  var compilerDispatch = match$4[1];
  var compilerState = match$4[0];
  var match$5 = React.useState(function () {
        
      });
  var setFocusedRowCol = match$5[1];
  var editorCode = React.useRef(initialContent);
  if (typeof compilerState !== "number" && compilerState.TAG === /* Ready */2) {
    var ready = compilerState._0;
    var match$6 = ready.result;
    if (typeof match$6 === "number") {
      Curry._1(compilerDispatch, {
            TAG: 3,
            _0: ready.targetLang,
            _1: editorCode.current,
            [Symbol.for("name")]: "CompileCode"
          });
    } else if (match$6.TAG === /* Conv */0) {
      var match$7 = match$6._0;
      if (match$7.TAG === /* Success */0) {
        editorCode.current = match$7._0.code;
      }
      
    }
    
  }
  var typingTimer = React.useRef(undefined);
  var timeoutCompile = React.useRef(function (param) {
        
      });
  React.useEffect((function () {
          timeoutCompile.current = (function (param) {
              if (typeof compilerState === "number" || compilerState.TAG !== /* Ready */2) {
                return ;
              } else {
                return Curry._1(compilerDispatch, {
                            TAG: 3,
                            _0: compilerState._0.targetLang,
                            _1: editorCode.current,
                            [Symbol.for("name")]: "CompileCode"
                          });
              }
            });
        }), [compilerState]);
  var match$8 = React.useState(function () {
        if (window.innerWidth < 1024) {
          return /* Column */0;
        } else {
          return /* Row */1;
        }
      });
  var setLayout = match$8[1];
  var layout = match$8[0];
  var isDragging = React.useRef(false);
  var panelRef = React.useRef(null);
  var separatorRef = React.useRef(null);
  var leftPanelRef = React.useRef(null);
  var rightPanelRef = React.useRef(null);
  var subPanelRef = React.useRef(null);
  var onResize = function (param) {
    var newLayout = window.innerWidth < 1024 ? /* Column */0 : /* Row */1;
    Curry._1(setLayout, (function (param) {
            return newLayout;
          }));
    var element = panelRef.current;
    if (!(element == null)) {
      var offsetTop = element.getBoundingClientRect().top;
      element.style.height = "calc(100vh - " + String(offsetTop) + "px)";
    }
    var element$1 = subPanelRef.current;
    if (element$1 == null) {
      return ;
    }
    var offsetTop$1 = element$1.getBoundingClientRect().top;
    element$1.style.height = "calc(100vh - " + String(offsetTop$1) + "px)";
  };
  React.useEffect((function () {
          window.addEventListener("resize", onResize);
          return (function (param) {
                    window.removeEventListener("resize", onResize);
                  });
        }), []);
  React.useLayoutEffect(function () {
        onResize(undefined);
      });
  var onMouseDown = function (param) {
    isDragging.current = true;
  };
  var onMove = function (position) {
    if (!isDragging.current) {
      return ;
    }
    var match = panelRef.current;
    var match$1 = leftPanelRef.current;
    var match$2 = rightPanelRef.current;
    var match$3 = subPanelRef.current;
    if (match == null) {
      return ;
    }
    if (match$1 == null) {
      return ;
    }
    if (match$2 == null) {
      return ;
    }
    if (match$3 == null) {
      return ;
    }
    var rectPanel = match.getBoundingClientRect();
    var offsetTop = match$3.getBoundingClientRect().top;
    match$3.style.height = "calc(100vh - " + String(offsetTop) + "px)";
    if (layout) {
      var delta = position - rectPanel.left;
      var leftWidth = delta / rectPanel.width * 100.0;
      var rightWidth = (rectPanel.width - delta) / rectPanel.width * 100.0;
      match$1.style.width = "" + String(leftWidth) + "%";
      match$2.style.width = "" + String(rightWidth) + "%";
      return ;
    }
    var delta$1 = position - rectPanel.top;
    var topHeight = delta$1 / rectPanel.height * 100;
    var bottomHeight = (rectPanel.height - delta$1) / rectPanel.height * 100;
    match$1.style.height = "" + String(topHeight) + "%";
    match$2.style.height = "" + String(bottomHeight) + "%";
  };
  var onMouseMove = function (e) {
    e.preventDefault();
    onMove(layout === /* Row */1 ? e.clientX : e.clientY);
  };
  var onMouseUp = function (param) {
    isDragging.current = false;
  };
  var onTouchMove = function (e) {
    var touches = e.touches;
    var firstTouch = touches[0];
    onMove(layout === /* Row */1 ? firstTouch.clientX : firstTouch.clientY);
  };
  var onTouchStart = function (param) {
    isDragging.current = true;
  };
  React.useEffect(function () {
        window.addEventListener("mousemove", onMouseMove);
        window.addEventListener("touchmove", onTouchMove);
        window.addEventListener("mouseup", onMouseUp);
        return (function (param) {
                  window.removeEventListener("mousemove", onMouseMove);
                  window.removeEventListener("touchmove", onTouchMove);
                  window.removeEventListener("mouseup", onMouseUp);
                });
      });
  var cmErrors;
  if (typeof compilerState === "number") {
    cmErrors = [];
  } else if (compilerState.TAG === /* Ready */2) {
    var result = compilerState._0.result;
    if (typeof result === "number") {
      cmErrors = [];
    } else if (result.TAG === /* Conv */0) {
      var match$9 = result._0;
      cmErrors = match$9.TAG === /* Fail */1 ? match$9.details.map(function (param) {
              return locMsgToCmError("Error", param);
            }) : [];
    } else {
      var result$1 = result._0;
      switch (result$1.TAG | 0) {
        case /* Fail */0 :
            var result$2 = result$1._0;
            switch (result$2.TAG | 0) {
              case /* WarningErr */2 :
                  cmErrors = result$2._0.map(function (warning) {
                        return locMsgToCmError("Warning", warning.details);
                      });
                  break;
              case /* WarningFlagErr */3 :
                  cmErrors = [];
                  break;
              default:
                cmErrors = result$2._0.map(function (param) {
                      return locMsgToCmError("Error", param);
                    });
            }
            break;
        case /* Success */1 :
            cmErrors = result$1._0.warnings.map(function (warning) {
                  return locMsgToCmError("Warning", warning.details);
                });
            break;
        case /* UnexpectedError */2 :
        case /* Unknown */3 :
            cmErrors = [];
            break;
        
      }
    }
  } else {
    cmErrors = [];
  }
  var cmHoverHints;
  if (typeof compilerState === "number") {
    cmHoverHints = [];
  } else if (compilerState.TAG === /* Ready */2) {
    var match$10 = compilerState._0.result;
    if (typeof match$10 === "number") {
      cmHoverHints = [];
    } else if (match$10.TAG === /* Conv */0) {
      cmHoverHints = [];
    } else {
      var match$11 = match$10._0;
      cmHoverHints = match$11.TAG === /* Success */1 ? match$11._0.type_hints.map(function (hint) {
              var start = hint._0.start;
              var end = hint._0.end;
              return {
                      start: {
                        line: start.line,
                        col: start.col
                      },
                      end: {
                        line: end.line,
                        col: end.col
                      },
                      hint: hint._0.hint
                    };
            }) : [];
    }
  } else {
    cmHoverHints = [];
  }
  var mode;
  if (typeof compilerState === "number" || compilerState.TAG !== /* Ready */2) {
    mode = "rescript";
  } else {
    switch (compilerState._0.targetLang) {
      case /* Reason */0 :
          mode = "reason";
          break;
      case /* OCaml */1 :
      case /* Res */2 :
          mode = "rescript";
          break;
      
    }
  }
  var match$12 = React.useState(function () {
        return /* JavaScript */0;
      });
  var setCurrentTab = match$12[1];
  var currentTab = match$12[0];
  var makeTabClass = function (active) {
    var activeClass = active ? "text-white !border-sky-70 font-medium hover:cursor-default" : "";
    return "flex-1 items-center p-4 border-t-4 border-transparent " + activeClass;
  };
  var tabs = [
    /* JavaScript */0,
    /* Problems */1,
    /* Settings */2
  ];
  var headers = Belt_Array.mapWithIndex(tabs, (function (i, tab) {
          var title;
          switch (tab) {
            case /* JavaScript */0 :
                title = "JavaScript";
                break;
            case /* Problems */1 :
                title = "Problems";
                break;
            case /* Settings */2 :
                title = "Settings";
                break;
            
          }
          var onMouseDown = function (evt) {
            evt.preventDefault();
            evt.stopPropagation();
            Curry._1(setCurrentTab, (function (param) {
                    return tab;
                  }));
          };
          var active = currentTab === tab;
          var onClick = function (param) {
            
          };
          var className = makeTabClass(active);
          return React.createElement("button", {
                      key: String(i) + ("-" + title),
                      className: className,
                      disabled: false,
                      onClick: onClick,
                      onMouseDown: onMouseDown
                    }, title);
        }));
  return React.createElement("main", {
              className: "flex flex-col bg-gray-100 overflow-hidden"
            }, React.createElement(Playground$ControlPanel, {
                  actionIndicatorKey: String(match$3[0]),
                  state: compilerState,
                  dispatch: compilerDispatch,
                  editorCode: editorCode
                }), React.createElement("div", {
                  ref: panelRef,
                  className: "flex " + (
                    layout === /* Column */0 ? "flex-col" : "flex-row"
                  ) + ""
                }, React.createElement("div", {
                      ref: leftPanelRef,
                      className: "" + (
                        layout === /* Column */0 ? "h-2/4" : "!h-full"
                      ) + "",
                      style: {
                        width: layout === /* Column */0 ? "100%" : "50%"
                      }
                    }, React.createElement(CodeMirror.make, {
                          errors: cmErrors,
                          hoverHints: cmHoverHints,
                          className: "bg-gray-100 h-full",
                          onChange: (function (value) {
                              editorCode.current = value;
                              var timer = typingTimer.current;
                              if (timer !== undefined) {
                                clearTimeout(Caml_option.valFromOption(timer));
                              }
                              var timer$1 = setTimeout((function (param) {
                                      Curry._1(timeoutCompile.current, undefined);
                                      typingTimer.current = undefined;
                                    }), 100);
                              typingTimer.current = Caml_option.some(timer$1);
                            }),
                          onMarkerFocus: (function (rowCol) {
                              Curry._1(setFocusedRowCol, (function (_prev) {
                                      return rowCol;
                                    }));
                            }),
                          onMarkerFocusLeave: (function (param) {
                              Curry._1(setFocusedRowCol, (function (param) {
                                      
                                    }));
                            }),
                          value: editorCode.current,
                          mode: mode
                        })), React.createElement("div", {
                      ref: separatorRef,
                      className: "flex items-center justify-center touch-none select-none bg-gray-70 opacity-30 hover:opacity-50 rounded-lg",
                      style: {
                        cursor: layout === /* Column */0 ? "row-resize" : "col-resize"
                      },
                      onMouseDown: onMouseDown,
                      onTouchEnd: onMouseUp,
                      onTouchStart: onTouchStart
                    }, React.createElement("span", {
                          className: "m-0.5 " + (
                            layout === /* Column */0 ? "rotate-90" : ""
                          ) + ""
                        }, "⣿")), React.createElement("div", {
                      ref: rightPanelRef,
                      className: "" + (
                        layout === /* Column */0 ? "h-6/15" : "!h-inherit"
                      ) + "",
                      style: {
                        width: layout === /* Column */0 ? "100%" : "50%"
                      }
                    }, React.createElement("div", {
                          className: "flex flex-wrap justify-between w-full "
                        }, headers), React.createElement("div", {
                          ref: subPanelRef,
                          className: "overflow-auto"
                        }, React.createElement(Playground$OutputPanel, {
                              compilerDispatch: compilerDispatch,
                              compilerState: compilerState,
                              editorCode: editorCode,
                              currentTab: currentTab
                            })))));
}

var make = Playground;

export {
  make ,
}
/*  Not a pure module */
